/*
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with $1$ and $2$, the first $10$ terms will be:
$$1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ....
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

*/
/*
Iterative Sum: 4613732, Time taken: 0s
Recursive Sum for n=30: 6558868233897966651, Time taken: 1.1346522s
*/
package main

import (
	"fmt"
	"time"
)

func fiboSum(upperlimit int) int {
	first, second, sum := 0, 1, 0

	for first <= upperlimit {
		if _isEven(first) {
			sum += first
		}
		first, second = second, first+second
	}
	return sum
}

// Using memoization to check for values that have been calculated already
var memo = make(map[int]int)

func fiboSumRecursive(n int) int {
	if val, found := memo[n]; found {
		return val
	}
	if n == 0 || n == 1 {
		return n
	}
	memo[n] = fiboSumRecursive(n-1) + fiboSumRecursive(n-2)
	return memo[n]
}

func _isEven(number int) bool {
	return number%2 == 0
}

func main() {
	upperlimit := 4000000
	start := time.Now()
	iterativeSum := fiboSum(upperlimit)
	elapsed := time.Since(start)
	fmt.Printf("Iterative Sum: %d, Time taken: %s\n", iterativeSum, elapsed)

	start = time.Now()
	recursiveSum := fiboSumRecursive(upperlimit)
	elapsed = time.Since(start)
	fmt.Printf("Recursive Sum for n=30: %d, Time taken: %s\n", recursiveSum, elapsed)

}
